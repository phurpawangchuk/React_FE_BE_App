import React, { useEffect, useState, useContext } from 'react';
import toast from 'react-hot-toast';
import { useParams, useNavigate } from 'react-router';
import AuthContext from '../../context/authContext';
import { Link } from 'react-router-dom';
import { useQuery } from "react-query";

import api3000, { api80, api } from '../../api/api';
import useSmartCardData from '../../hooks/useSmartCardData';

function ApplicationDetails() {
    const { id } = useParams();

    const { data, status, error, isLoading } = useSmartCardData(id);
    console.log(data);

    const [dobFormatted, setBobFormatted] = useState();
    const navigate = useNavigate();
    const loggedInData = useContext(AuthContext);
    // console.log(id);

    // useEffect(() => {
    //     const controller = new AbortController();
    //     const fetchData = async () => {
    //         const response = await api.get(`/smartcard/pending/${id}`, {
    //             signal: controller.signal,
    //             headers: {
    //                 Authorization: 'Bearer ' + loggedIndata.userToken
    //             }
    //         });
    //         console.log(response.data.card);
    //         setdata(response.data.card);
    //     };

    //     fetchData();

    // }, [id]);


    // Example usage of fetchData:
    // const data = fetchData({ id });
    // console.log(data);

    // useEffect(() => {
    //     const controller = new AbortController();
    //     const response = api.get(`/smartcard/pending/${id}`, {
    //         signal: controller.signal,
    //         headers: {
    //             Authorization: 'Bearer ' + loggedIndata.userToken
    //         }
    //     }).then((response) => {
    //         setdata(response.data.card);
    //     }).catch((error) => {
    //         toast.error("Login to access the users");
    //         console.error('Unauthorized.', error);
    //     });

    //     return () => controller.abort();

    // }, [id]);


    // const fetchPost = async (id) => {
    //     try {
    //         const response = await api.get(`/smartcard/pending/${id}`, {
    //             headers: {
    //                 Authorization: 'Bearer ' + loggedIndata.userToken
    //             }
    //         });
    //         console.log(response.data)
    //         // const dateObject = new Date(response.data.card.dob);
    //         // setBobFormatted(dateObject.toISOString().split('T')[0]);
    //         setdata(response.data.card); // Assuming the response data contains a single post object
    //     } catch (error) {
    //         toast.error("Login to access the users");
    //         console.error('Unauthorized.', error);
    //     }
    // };

    // const [error, setError] = useState('');
    const [userData, setUserData] = useState({
        name: '',
        gender: '',
        email: '',
        cid: '',
        mobile: '',
        dob: '',
        cardType: '',
        registrationType: '',
        address: '',
        remarks: '',
        action: '',
        actionRadio: ''
    });

    // setdata(data);

    const handleInput = (event) => {
        const { name, value, type } = event.target;
        setdata((prevValues) => ({
            ...prevValues,
            [name]: value
        }));
    }

    const handleSubmit = (e) => {
        e.preventDefault();

        if (data.actionRadio === undefined) {
            setError('Please select the action.');
            return;
        }

        const formData = new FormData();
        formdata.append('name', data.name);
        formdata.append('email', data.email);
        formdata.append('cid', data.cid);
        formdata.append('mobile', data.mobile);
        formdata.append('gender', data.gender);
        formdata.append('dob', data.dob);
        formdata.append('location', data.location);
        formdata.append('cardType', data.cardType);
        formdata.append('regType', data.regType);
        formdata.append('action', data.actionRadio);
        formdata.append('remarks', data.remarks);
        formdata.append('author', 1);

        api.put(`/smartcard/${id}`, formData, {
            headers: {
                Authorization: 'Bearer ' + localStorage.getItem('token')
            }
        }).then((result) => {
            toast.success("Data updated successfully");
            console.log(result)
            navigate('/pending');
        }).catch((error) => {
            toast.error("Error:" + error.message);
            console.log(error);
        })


    }

    return (

        <div className="d-flex container mt-3 justify-content-center align-items-center min-vh-80">
            <div className="card shadow bg-white rounded col-md-8">
                <form onSubmit={handleSubmit}>
                    <h4>Update Application</h4>
                    {error && <div className="alert alert-danger">{error}</div>}

                    <div className="mb-2">
                        <label htmlFor="name">Full Name</label>
                        <input
                            type="text"
                            name="name"
                            value={data ? data.name : ''}
                            className={`form-control is-valid`}
                            onChange={handleInput}
                        />
                    </div>

                    <div className="mb-2">
                        <label htmlFor="gender">Gender</label>
                        <select
                            name='gender'
                            onChange={handleInput}
                            className={`form-control is-valid`}
                        >
                            <option value={data ? data.gender:''} defaultValue>{data.gender}</option>
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                        </select>
                    </div>

                    <div className="mb-2">
                        <label htmlFor="cid">CID/Student Number</label>
                        <input
                            type="text"
                            name="cid"
                            value={data.cid}
                            className={`form-control is-valid`}
                            onChange={handleInput}
                            required
                        />
                    </div>

                    <div className="mb-2">
                        <label htmlFor="mobile">Mobile Number</label>
                        <input
                            type="text"
                            name="mobile"
                            value={data.mobile}
                            className={`form-control is-valid`}
                            onChange={handleInput}
                        />
                    </div>

                    <div className="mb-2">
                        <label htmlFor="dob">Date of Birth</label>
                        <input
                            type="date"
                            value={data.dob ? data.dob : ''}
                            className={`form-control is-valid`}
                            name="dob"
                            onChange={handleInput}
                        />
                    </div>

                    <div className="mb-2">
                        <label htmlFor="location">Current Address</label>
                        <textarea
                            type="text"
                            name="location"
                            value={data.location}
                            className={`form-control is-valid`}
                            onChange={handleInput}
                        />
                    </div>

                    <div className="mb-2">
                        <label htmlFor="email">Registration Type</label>
                        <select
                            onChange={handleInput}
                            name='registrationType'
                            className={`form-control is-valid`}
                        >
                            {data.reg_type && (
                                <option value={data.reg_type.id} defaultValue>{data.reg_type.cardType}</option>
                            )}
                            <option value='1'>New</option>
                            <option value='2'>Replacement</option>
                            <option value='3'>Renewal</option>
                        </select>
                    </div>

                    <div className="mb-2">
                        <label htmlFor="cardType">Card Type</label>
                        <select
                            onChange={handleInput}
                            name='cardType'
                            className={`form-control is-valid`}
                        >
                            {data.card_type && (
                                <option value={data.card_type.id} defaultValue>{data.card_type.cardType}</option>
                            )}
                            <option value='1'>Regular</option>
                            <option value='2'>Disability</option>
                            <option value='3'>Senior Citizen</option>
                            <option value='4'>Consession/StudentCard</option>
                        </select>
                    </div>

                    <div className="mb-2">
                        <label htmlFor="email">Email</label>
                        <input
                            type="email"
                            name="email"
                            value={data.email}
                            className={`form-control is-valid`}
                            onChange={handleInput}
                        />
                    </div>

                    <div className="mb-2">
                        <label htmlFor="address">Remarks</label>
                        <textarea
                            type="text"
                            name="remarks"
                            className={`form-control is-valid`}
                            onChange={handleInput}
                        />
                    </div>

                    <div className="mb-2">
                        Please take the action:&nbsp;&nbsp;
                        <label className='mr-3'>
                            <input type="radio" name="actionRadio" value="Approved" onChange={handleInput} />
                            <strong>&nbsp;Approve</strong>
                        </label>
                        &nbsp;  &nbsp;  &nbsp;
                        <label>
                            <input type="radio" name='actionRadio' value="Rejected" onChange={handleInput} />

                            <strong className='ml-4'>&nbsp;Reject</strong>
                        </label>
                    </div>

                    <div className="mb-2">
                        <button className='btn btn-success'>Update</button>
                        <Link to={`/pending`} className='btn btn-success mx-2'>Back</Link>
                    </div>

                </form>
            </div>
        </div>
    );
}

export default ApplicationDetails;
